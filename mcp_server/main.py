# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:17:10+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import Format

app = MCPProxy(
    contact={'x-twitter': 'fraudlabspro'},
    description='Send an SMS with verification code and a custom message for authentication purpose. It helps merchants to minimize chargebacks and fraud for various kinds of payment method, such as credit card, paypal, cod and so on. Please visit https://www.fraudlabspro.com to learn more.',
    title='FraudLabs Pro SMS Verification',
    version='1.0',
    servers=[
        {
            'description': 'Send an SMS with verification code and a custom message for authentication purpose.',
            'url': 'https://api.fraudlabspro.com',
        },
        {
            'description': 'Verify that an OTP sent by the Send SMS Verification API is valid.',
            'url': 'https://api.fraudlabspro.com',
        },
    ],
)


@app.get(
    '/v1/verification/result',
    description=""" Verify that an OTP sent by the Send SMS Verification API is valid. """,
    tags=['verification_process_management'],
)
def get_v1_verification_result(
    tran_id: str, key: str = ..., format: Optional[Format] = None, otp: str = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/verification/send',
    description=""" Send an SMS with verification code and a custom message for authentication purpose. """,
    tags=['verification_process_management'],
)
def post_v1_verification_send(
    country_code: Optional[str] = None,
    format: Optional[Format] = None,
    tel: str = ...,
    key: str = ...,
    mesg: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
